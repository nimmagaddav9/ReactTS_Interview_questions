Functions
=========================
Functions are the main “building blocks” of the program. They allow the code to be called many times without repetition.


Function Declaration
---------------------------------
To create a function we can use a function declaration.

syntax:
function name(parameter1, parameter2, ... parameterN) {
 // body
}

** the main purposes of functions: to avoid code duplication.

Local variables
--------------------------
A variable declared inside a function is only visible inside that function.

For example:

function showMessage() {
  let message = "Hello, I'm JavaScript!"; // local variable

  alert( message );
}

showMessage(); // Hello, I'm JavaScript!

alert( message ); // <-- Error! The variable is local to the function



Outer variables
------------------------
A function can access an outer variable as well, for example:

let userName = 'John';

function showMessage() {
  let message = 'Hello, ' + userName;
  alert(message);
}

showMessage(); // Hello, John

** The function has full access to the outer variable. It can modify it as well.


Global variables
=============================
Variables declared outside of any function, such as the outer userName in the code above, are called global.

Global variables are visible from any function (unless shadowed by locals).

It’s a good practice to minimize the use of global variables. Modern code has few or no globals. Most variables reside in their functions. Sometimes though, they can be useful to store project-level data.


Parameters
===============================
We can pass arbitrary data to functions using parameters.

In the example below, the function has two parameters: from and text.

function showMessage(from, text) { // parameters: from, text
  alert(from + ': ' + text);
}

showMessage('Ann', 'Hello!'); // Ann: Hello! (*)
showMessage('Ann', "What's up?"); // Ann: What's up? (**)


* A parameter is the variable listed inside the parentheses in the function declaration (it’s a declaration time term).
* An argument is the value that is passed to the function when it is called (it’s a call time term).

Default values
=================================
If a function is called, but an argument is not provided, then the corresponding value becomes undefined.

Evaluation of default parameters
-----------------------------------------
In JavaScript, a default parameter is evaluated every time the function is called without the respective parameter.


Returning a value
----------------------------------------
A function can return a value back into the calling code as the result.

The simplest example would be a function that sums two values:

function sum(a, b) {
  return a + b;
}

let result = sum(1, 2);
alert( result ); // 3

** A function with an empty return or without it returns undefined
---------------------------------------------------------------------------------------
If a function does not return a value, it is the same as if it returns undefined:
function doNothing() { /* empty */ }

alert( doNothing() === undefined ); // true

* Never add a newline between return and the value


Naming a function
=========================
Functions are actions. So their name is usually a verb. It should be brief, as accurate as possible and describe what the function does, so that someone reading the code gets an indication of what the function does.

For instance, functions that start with "show" usually show something.

Function starting with…

"get…" – return a value,
"calc…" – calculate something,
"create…" – create something,
"check…" – check something and return a boolean, etc.

Examples of such names:

showMessage(..)     // shows a message
getAge(..)          // returns the age (gets it somehow)
calcSum(..)         // calculates a sum and returns the result
createForm(..)      // creates a form (and usually returns it)
checkPermission(..) // checks a permission, returns true/false

Ultrashort function names
----------------------------------------------------
Functions that are used very often sometimes have ultrashort names.

For example, the jQuery framework defines a function with $. The Lodash library has its core function named _.

These are exceptions. Generally function names should be concise and descriptive.

Summary
=============================================================
A function declaration looks like this:

function name(parameters, delimited, by, comma) {
  /* code */
}
Values passed to a function as parameters are copied to its local variables.
A function may access outer variables. But it works only from inside out. The code outside of the function doesn’t see its local variables.
A function can return a value. If it doesn’t, then its result is undefined.
To make the code clean and easy to understand, it’s recommended to use mainly local variables and parameters in the function, not outer variables.

It is always easier to understand a function which gets parameters, works with them and returns a result than a function which gets no parameters, but modifies outer variables as a side effect.


Function naming:
----------------------
A name should clearly describe what the function does. When we see a function call in the code, a good name instantly gives us an understanding what it does and returns.
A function is an action, so function names are usually verbal.
There exist many well-known function prefixes like create…, show…, get…, check… and so on. Use them to hint what a function does.
Functions are the main building blocks of scripts.