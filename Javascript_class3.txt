Conditional branching: if, '?'
---------------------------------------------

The “if” statement
The if(...) statement evaluates a condition in parentheses and, if the result is true, executes a block of code.
wrapping your code block with curly braces {} every time you use an if statement, even if there is only one statement to execute. Doing so improves readability.

Boolean conversion
-----------------------------
The if (…) statement evaluates the expression in its parentheses and converts the result to a boolean.

Rules from the Type Conversions:

A number 0, an empty string "", null, undefined, and NaN all become false. Because of that they are called “falsy” values.
Other values become true, so they are called “truthy”.

The “else” clause
---------------------------
The if statement may contain an optional else block. It executes when the condition is falsy.

Several conditions: “else if”
----------------------------------
Sometimes, we’d like to test several variants of a condition. The else if clause lets us do that.


Conditional operator ‘?’
----------------------------
Sometimes, we need to assign a variable depending on a condition.
The so-called “conditional” or “question mark” operator lets us do that in a shorter and simpler way.
The operator is represented by a question mark ?. Sometimes it’s called “ternary”, because the operator has three operands. It is actually the one and only operator in JavaScript which has that many.

The syntax is:
let result = condition ? value1 : value2;
// The condition is evaluated: if it’s truthy then value1 is returned, otherwise – value2.

Multiple ‘?’
---------------
A sequence of question mark operators ? can return a value that depends on more than one condition.

Non-traditional use of ‘?’
----------------------------------
The purpose of the question mark operator ? is to return one value or another depending on its condition. Please use it for exactly that. Use if when you need to execute different branches of code.



Logical operators
=====================================================
There are four logical operators in JavaScript: || (OR), && (AND), ! (NOT), ?? (Nullish Coalescing).

|| (OR)
---------------------
The “OR” operator is represented with two vertical line symbols ||.
The logical OR is meant to manipulate boolean values only. If any of its arguments are true, it returns true, otherwise it returns false.
There are four possible logical combinations:

alert( true || true );   // true
alert( false || true );  // true
alert( true || false );  // true
alert( false || false ); // false

Most of the time, OR || is used in an if statement to test if any of the given conditions is true.

Ex: result = value1 || value2 || value3;
The OR || operator does the following:

    Evaluates operands from left to right.
    For each operand, converts it to boolean. If the result is true, stops and returns the original value of that operand.
    If all operands have been evaluated (i.e. all were false), returns the last operand.
    A value is returned in its original form, without the conversion.


   1. Getting the first truthy value from a list of variables or expressions.
   2. Short-circuit evaluation.
        Another feature of OR || operator is the so-called “short-circuit” evaluation.

        It means that || processes its arguments until the first truthy value is reached, and then the value is returned immediately, without even touching the other argument.

        The importance of this feature becomes obvious if an operand isn’t just a value, but an expression with a side effect, such as a variable assignment or a function call.

&& (AND)
------------------------
The AND operator is represented with two ampersands &&:
In classical programming, AND returns true if both operands are truthy and false otherwise:
alert( true && true );   // true
alert( false && true );  // false
alert( true && false );  // false
alert( false && false ); // false

AND “&&” finds the first falsy value
The AND && operator does the following:

Evaluates operands from left to right.
For each operand, converts it to a boolean. If the result is false, stops and returns the original value of that operand.
If all operands have been evaluated (i.e. all were truthy), returns the last operand.

*** Precedence of AND && is higher than OR ||
So the code a && b || c && d is essentially the same as if the && expressions were in parentheses: (a && b) || (c && d).

! (NOT)
------------------------
The boolean NOT operator is represented with an exclamation sign !.

The syntax is pretty simple:

result = !value;
The operator accepts a single argument and does the following:

Converts the operand to boolean type: true/false.
Returns the inverse value.
For instance:

alert( !true ); // false
alert( !0 ); // true

A double NOT !! is sometimes used for converting a value to boolean type:

alert( !!"non-empty string" ); // true
alert( !!null ); // false
That is, the first NOT converts the value to boolean and returns the inverse, and the second NOT inverses it again. In the end, we have a plain value-to-boolean conversion.